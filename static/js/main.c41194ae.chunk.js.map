{"version":3,"sources":["component/Result.js","component/Results.js","component/Search.js","component/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Result","result","openPopup","className","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Search","handleInput","search","type","placeholder","onChange","onKeyPress","Popup","selected","closePopup","Year","imdbRating","Plot","App","APIKEY","useState","s","state","setState","e","target","value","prevState","console","log","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAWeA,EATA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UACrB,OACI,yBAAKC,UAAU,SAASC,QAAS,kBAAMF,EAAUD,EAAOI,UACpD,yBAAKC,IAAKL,EAAOM,OAAQC,IAAI,KAC7B,4BAAKP,EAAOQ,SCUTC,EAbC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAAST,EAAe,EAAfA,UACvB,OAEI,6BAASC,UAAU,WACdQ,EAAQC,KAAI,SAAAX,GAAM,OACf,kBAAC,EAAD,CAASY,IAAKZ,EAAOI,OAAQJ,OAAQA,EAAQC,UAAWA,SCOzDY,EAbA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,YAAYC,EAAY,EAAZA,OACzB,OACI,6BAASb,UAAU,kBACf,2BAAOc,KAAK,OACZd,UAAU,YACVe,YAAY,iBACZC,SAAUJ,EACVK,WAAYJ,M,gBCSTK,EAhBD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAASC,EAAgB,EAAhBA,WACrB,OACI,6BAASpB,UAAU,SACf,yBAAKA,UAAU,WACX,4BAAKmB,EAASb,MAAM,kCAAQa,EAASE,KAAjB,MACpB,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YACxC,yBAAKtB,UAAU,QACX,yBAAKG,IAAKgB,EAASf,OAAQC,IAAI,KAC/B,2BAAIc,EAASI,OAEjB,4BAAQvB,UAAU,QAAQC,QAASmB,GAAnC,YCsDDI,MA5Df,WAEE,IAAMC,EAAO,0CAFA,EAGUC,mBAAS,CAC9BC,EAAE,GACFnB,QAAQ,GACRW,SAAS,KANE,mBAGNS,EAHM,KAGAC,EAHA,KA6Cb,OACE,yBAAK7B,UAAU,OACX,gCACI,+CAEJ,8BACE,kBAAC,EAAD,CAAQY,YAhBE,SAACkB,GACjB,IAAIH,EAAEG,EAAEC,OAAOC,MAEfH,GAAS,SAAAI,GACP,OAAO,eAAIA,EAAX,CAAqBN,EAAEA,OAGzBO,QAAQC,IAAIP,EAAMD,IASsBd,OA1C7B,SAACiB,GACD,UAARA,EAAEpB,KACL0B,IAAMX,EAAO,MAAMG,EAAMD,GAAGU,MAAK,YAAW,IACtC7B,EADqC,EAAR8B,KAChB3B,OACjBkB,GAAS,SAAAI,GACP,OAAO,eAAIA,EAAX,CAAsBzB,QAAQA,aAsC5B,kBAAC,EAAD,CAASA,QAASoB,EAAMpB,QAAST,UAjCzB,SAACwC,GACfH,IAAMX,EAAS,MAAQc,GAAIF,MAAK,YAAa,IACrCvC,EADoC,EAATwC,KAG/BT,GAAS,SAAAI,GACP,OAAO,eAAIA,EAAX,CAAsBd,SAASrB,aA6BC,oBAAvB8B,EAAMT,SAASb,OAAuB,kBAAC,EAAD,CAAOa,SAAUS,EAAMT,SAAUC,WAxBvE,WACfS,GAAS,SAAAI,GACH,OAAO,eAAIA,EAAX,CAAsBd,SAAS,cCzBrBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.c41194ae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Result = ({result, openPopup}) => {\r\n    return (\r\n        <div className=\"result\" onClick={() => openPopup(result.imdbID)}>\r\n            <img src={result.Poster} alt=\"\"/>\r\n            <h3>{result.Title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React from 'react'\r\nimport Result from \"./Result\"\r\n\r\nconst Results = ({results, openPopup}) => {\r\n    return (\r\n        \r\n        <section className=\"results\">\r\n            {results.map(result=>(\r\n                <Result  key={result.imdbID} result={result} openPopup={openPopup}/>\r\n                  \r\n            ))}\r\n            \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nconst Search = ({handleInput,search}) => {\r\n    return (\r\n        <section className=\"searchbox-wrap\">\r\n            <input type=\"text\" \r\n            className=\"searchbox\"\r\n            placeholder=\"Search a movie\"\r\n            onChange={handleInput}\r\n            onKeyPress={search}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nconst Popup = ({selected,closePopup}) => {\r\n    return (\r\n        <section className=\"popup\">\r\n            <div className=\"content\">\r\n                <h2>{selected.Title}<span>({selected.Year})</span></h2>\r\n                <p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n                <div className=\"plot\">\r\n                    <img src={selected.Poster} alt=\"\"/>\r\n                    <p>{selected.Plot}</p>\r\n                </div>\r\n                <button className=\"close\" onClick={closePopup}>Close</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Popup","import React,{useState} from 'react';\nimport Results from \"./component/Results\"\nimport Search from \"./component/Search\"\nimport axios from \"axios\"\nimport Popup from \"./component/Popup\"\n\nfunction App() {\n\n  const APIKEY=\"http://www.omdbapi.com/?apikey=6a3c33da\"\n  const [state,setState]=useState({\n    s:\"\",\n    results:[],\n    selected:[]\n  })\n\n  const search=(e)=>{\n    if(e.key===\"Enter\"){\n    axios(APIKEY+\"&s=\"+state.s).then(({data})=>{\n      let results=data.Search\n      setState(prevState=>{\n        return {...prevState, results:results}\n      })\n    })\n  }}\n\n  const openPopup=(id)=>{\n    axios(APIKEY + \"&i=\" + id).then(({ data })=>{\n        let result=data\n        //console.log(id)\n        setState(prevState=>{\n          return {...prevState, selected:result}\n        })\n    })\n  }\n\n  const closePopup=()=>{\n    setState(prevState=>{\n          return {...prevState, selected:{}}\n        })\n    }\n\n  const handleInput=(e)=>{\n    let s=e.target.value\n\n    setState(prevState=>{\n      return {...prevState,s:s}\n    })\n\n    console.log(state.s)\n  }\n\n  return (\n    <div className=\"App\">\n        <header>\n            <h1>MOVIE DATABASE</h1>\n        </header>\n        <main>\n          <Search handleInput={handleInput} search={search}/>\n          <Results results={state.results} openPopup={openPopup}/>\n          {(typeof state.selected.Title !=\"undefined\") ? <Popup selected={state.selected} closePopup={closePopup}/>:false}\n        </main>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}